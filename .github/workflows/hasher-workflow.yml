name: Dockercoins CI/CD hasher component
run-name: Dockercoins hasher CI/CD
on: [push]
jobs:
  Test:
    name: Run Unit Tests.
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@master
    - name: Unit Test Hasher Ruby
      run: |
        ruby tests/unit_test.rb
  BuildScanAndPushImage:
    name: Build and push the docker image.
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: 0.0.1
          release_name: Release 0.0.1
          body: |
            Hasher version 0.0.1.
          draft: false
          prerelease: false  
      - name: Set output
        id: vars
        run: |
          echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      - name: Calculate image tag
        id: calculate_tag
        run: |
          currentBranch=${{ steps.vars.outputs.branch }}
          if [[ $currentBranch == 'main' ]]
            then
              tag=${{ steps.vars.outputs.tag_name }}
          else
            tag=${{ github.sha }}-${{ steps.vars.outputs.tag_name }}
          fi   
          echo "tag=$tag" >> $GITHUB_OUTPUT 
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push the Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: |
            mbouzayeni/hasher:${{ steps.calculate_tag.tag }}
          cache-from: type=registry,ref=mbouzayeni/hasher:buildcache
          cache-to: type=registry,ref=mbouzayeni/hasher:buildcache,mode=max
  # DeployCanary:
  # DeployToProduction: